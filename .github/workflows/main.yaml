# name: network-security-workflow

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#     paths-ignore:
#       - "README.md"

# jobs:
#   integration:
#     name: Continuous Integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Lint Code
#         run: echo "Linting repository"

#       - name: Run tests
#         run: echo "Running tests"

#   build-and-push-ecr-image:
#     name: Continuous Delivery
#     needs: integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install Utilities
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y jq unzip

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to AWS ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag and push image to Amazon Public ECR
#         id: build-image
#         env:
#           PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
#           IMAGE_TAG: latest
#         run: |
#           # Authenticate to Amazon Public ECR
#           aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | \
#           docker login --username AWS --password-stdin $PUBLIC_ECR_REGISTRY

#           # Build the Docker image
#             docker build -t $PUBLIC_ECR_REGISTRY:$IMAGE_TAG .

#           # Push the Docker image to Public ECR
#             docker push $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

#           # Output the pushed image URL
#           echo "image=public.ecr.aws.$PUBLIC_ECR_REGISTRY:$IMAGE_TAG" >> $GITHUB_ENV

#   build-and-push-ecr-image-to-ec2:
#     name: Continuous Deployment
#     needs: build-and-push-ecr-image
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to AWS ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Pull latest image from Amazon Public ECR
#         id: pull-image
#         env:
#           PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
#           IMAGE_TAG: latest
#         run: |
#           # Authenticate to Amazon Public ECR
#           aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | \
#           docker login --username AWS --password-stdin $PUBLIC_ECR_REGISTRY

#           # Pull the Docker image from Public ECR
#           docker pull $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

#       - name: Stop and remove the existing Docker container
#         run: |
#           docker ps -q --filter "name=network-security-model" | grep -q . && docker stop network-security-model && docker rm -fv network-security-model || echo "No existing container found"

#       - name: Run the Docker container in EC2 instance
#         run: |
#           docker run -d -p 8000:8000 ipc="host" --name=network-security-model -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}' $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

#       - name: Clean previous Docker images and containers
#         run: |
#           docker system prune -f

name: network-security-workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Linting repository"

      - name: Run tests
        run: echo "Running tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip awscli  # Added awscli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build, tag and push image to Amazon Public ECR
        id: build-image
        env:
          PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
          IMAGE_TAG: latest
        run: |
          # Authenticate to Amazon Public ECR
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $PUBLIC_ECR_REGISTRY

          # Build the Docker image
          docker build -t $PUBLIC_ECR_REGISTRY:$IMAGE_TAG .

          # Push the Docker image to Public ECR
          docker push $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

          # Output the pushed image URL
          echo "image=$PUBLIC_ECR_REGISTRY:$IMAGE_TAG" >> $GITHUB_ENV

  build-and-push-ecr-image-to-ec2:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli  # Ensure awscli is available on self-hosted runner

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Pull latest image from Amazon Public ECR
        env:
          PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
          IMAGE_TAG: latest
        run: |
          # Authenticate to Amazon Public ECR
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $PUBLIC_ECR_REGISTRY

          # Pull the Docker image from Public ECR
          docker pull $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

      - name: Stop and remove the existing Docker container
        run: |
          docker ps -q --filter "name=network-security-model" | grep -q . && \
          docker stop network-security-model && \
          docker rm -fv network-security-model || echo "No existing container found"

      - name: Run the Docker container in EC2 instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker run -d -p 8000:8000 \
          --name=network-security-model \
          -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
          -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
          -e AWS_REGION=$AWS_REGION \
          $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

      - name: Clean previous Docker images and containers
        run: |
          docker system prune -f
