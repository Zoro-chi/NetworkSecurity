name: network-security-workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Linting repository"

      - name: Run tests
        run: echo "Running tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install or Update AWS CLI v2
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          rm -rf awscliv2.zip aws

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build, tag, and push image to Amazon Public ECR
        env:
          PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
          IMAGE_NAME: network-security-model
          IMAGE_TAG: latest
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $PUBLIC_ECR_REGISTRY

          docker build -t $PUBLIC_ECR_REGISTRY:$IMAGE_TAG .
          docker push $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

  build-and-push-ecr-image-to-ec2:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install or Update AWS CLI v2
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          rm -rf awscliv2.zip aws

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Pull latest image from Amazon Public ECR
        env:
          PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
          IMAGE_NAME: network-security-model
          IMAGE_TAG: latest
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $PUBLIC_ECR_REGISTRY

          docker pull $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

      - name: Stop and remove the existing Docker container
        run: |
          docker ps -q --filter "name=network-security" | grep -q . && \
          docker stop network-security && \
          docker rm -fv network-security || echo "No existing container found"

      - name: Run the Docker container in EC2 instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PUBLIC_ECR_REGISTRY: ${{ secrets.AWS_PUBLIC_ECR_REGISTRY }}
          IMAGE_TAG: latest
          IMAGE_NAME: network-security-model
        run: |
          docker run -d \
              -p 8000:8000 \
              --name $IMAGE_NAME \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              -e AWS_REGION=$AWS_REGION \
              $PUBLIC_ECR_REGISTRY:$IMAGE_TAG

      - name: Clean up unused Docker images and containers
        run: |
          docker system prune -f
